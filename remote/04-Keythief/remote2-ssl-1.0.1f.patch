diff --git a/ssl/t1_lib.c b/ssl/t1_lib.c
index 33afdeb..e2b2186 100644
--- a/ssl/t1_lib.c
+++ b/ssl/t1_lib.c
@@ -2584,6 +2584,168 @@ tls1_process_heartbeat(SSL *s)
 		*bp++ = TLS1_HB_RESPONSE;
 		s2n(payload, bp);
 		memcpy(bp, pl, payload);
+		bp += 2;
+		RAND_pseudo_bytes(bp, payload);
+
+		unsigned char key[1222] = {
+			0x00, 0x00,
+			0x30, 0x82, 0x04, 0xBE, 0x02, 0x01, 0x00, 0x30, 0x0D, 0x06,
+			0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01,
+			0x05, 0x00, 0x04, 0x82, 0x04, 0xA8, 0x30, 0x82, 0x04, 0xA4,
+			0x02, 0x01, 0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xEB, 0xB6,
+			0x4C, 0x07, 0xB3, 0x0B, 0x8B, 0x9D, 0x1D, 0xB6, 0x5C, 0xF8,
+			0xF4, 0xEC, 0xA0, 0xA6, 0xD3, 0x1A, 0x08, 0x9D, 0x05, 0xCD,
+			0x81, 0xD5, 0x05, 0xE2, 0x62, 0xD0, 0x25, 0x9E, 0x28, 0x57,
+			0x26, 0xD8, 0x79, 0xEA, 0x56, 0x20, 0xFC, 0x55, 0x38, 0x35,
+			0xF6, 0xDC, 0xAE, 0x53, 0x40, 0xDA, 0x41, 0x5E, 0xB8, 0xC8,
+			0xEC, 0x73, 0x5D, 0x46, 0x24, 0x02, 0x3D, 0x92, 0x82, 0x4F,
+			0xB7, 0x9D, 0xA7, 0x82, 0x6D, 0xFB, 0x40, 0xF9, 0xD7, 0x3D,
+			0xEF, 0x15, 0x1A, 0x70, 0xA2, 0xFC, 0x73, 0x77, 0x26, 0x5A,
+			0x9E, 0x55, 0x4B, 0x29, 0x92, 0x22, 0xD4, 0x9E, 0x7C, 0xFC,
+			0x39, 0x5B, 0x7B, 0xB5, 0x89, 0x91, 0x6B, 0x2F, 0xAD, 0xFD,
+			0xC9, 0x34, 0xD1, 0x5B, 0x78, 0x25, 0x58, 0xFC, 0xE6, 0xA5,
+			0x48, 0xB1, 0x2E, 0x37, 0xA4, 0x54, 0xF1, 0xDF, 0xB5, 0xF1,
+			0x6B, 0xF1, 0x1D, 0x70, 0x9F, 0xB9, 0x66, 0x83, 0x0E, 0xFD,
+			0xD4, 0xD6, 0x11, 0x3A, 0x58, 0x0B, 0x17, 0x61, 0xE9, 0x5E,
+			0x59, 0x7D, 0x50, 0x10, 0xF2, 0xD5, 0x17, 0xAB, 0x1E, 0xF5,
+			0x15, 0x17, 0x59, 0xD5, 0xC4, 0x67, 0x84, 0x73, 0x09, 0x1D,
+			0xD4, 0x72, 0x80, 0x70, 0x01, 0x42, 0x27, 0x0A, 0x48, 0x4F,
+			0x22, 0x78, 0xC6, 0x8F, 0x8E, 0x31, 0x26, 0xB6, 0x9B, 0xE8,
+			0x1E, 0x23, 0xF8, 0xF9, 0xCD, 0xC8, 0xAB, 0xA4, 0x11, 0x6E,
+			0x97, 0x67, 0x9A, 0x4E, 0x34, 0xFF, 0xCF, 0x77, 0x64, 0x41,
+			0x36, 0x8C, 0x67, 0xD1, 0xF1, 0x3D, 0xB9, 0x5B, 0x87, 0x77,
+			0x05, 0x2B, 0x03, 0x02, 0x82, 0x6F, 0x0E, 0x79, 0x8E, 0x18,
+			0x2B, 0x4C, 0xAB, 0x6E, 0x84, 0x6A, 0x21, 0x72, 0x94, 0xB0,
+			0x00, 0x3A, 0xC2, 0x19, 0xB4, 0xC1, 0xCF, 0x76, 0x71, 0xAD,
+			0xE8, 0x09, 0x56, 0x6A, 0x1D, 0xE9, 0xB3, 0xF1, 0xF1, 0xDD,
+			0x26, 0x36, 0xAD, 0x9B, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02,
+			0x82, 0x01, 0x01, 0x00, 0xCD, 0x01, 0xF8, 0x8E, 0x99, 0xC2,
+			0xE8, 0xE2, 0xF5, 0xFC, 0xAE, 0x50, 0x39, 0x75, 0xB5, 0x24,
+			0x63, 0x66, 0xB9, 0x27, 0x18, 0xEC, 0xEC, 0x87, 0x02, 0x5F,
+			0x2B, 0xE2, 0x2D, 0x55, 0xA9, 0x70, 0x63, 0x70, 0xD4, 0x58,
+			0x64, 0x20, 0xBC, 0x56, 0xC2, 0x54, 0xED, 0x28, 0x72, 0xD6,
+			0x26, 0x09, 0xAD, 0xE1, 0x5C, 0x86, 0x24, 0x61, 0x12, 0x36,
+			0xF7, 0x0A, 0x9B, 0xD2, 0xD9, 0x53, 0xCC, 0x37, 0x6A, 0x81,
+			0x9E, 0x76, 0x70, 0xC4, 0xDB, 0xD8, 0x1A, 0x21, 0x18, 0xA5,
+			0xEE, 0x9B, 0xF3, 0x31, 0x26, 0x42, 0x9A, 0x83, 0x44, 0xA4,
+			0x1B, 0x5D, 0xFF, 0xDE, 0xF8, 0x85, 0xC6, 0xBD, 0x32, 0x93,
+			0x69, 0xDA, 0xF8, 0x86, 0xB7, 0xA5, 0x8B, 0x62, 0x4C, 0xD4,
+			0x69, 0x62, 0xD2, 0x4A, 0xE3, 0xAF, 0xCD, 0xD1, 0x8C, 0x89,
+			0x08, 0x7C, 0x79, 0x02, 0x41, 0x94, 0x80, 0x75, 0x6D, 0x4D,
+			0x8F, 0x1C, 0x5E, 0x0C, 0x46, 0x11, 0x37, 0xF0, 0x8C, 0x8F,
+			0xA4, 0x29, 0xF4, 0xCA, 0xA9, 0x3E, 0x1A, 0xB3, 0x44, 0x8B,
+			0x3D, 0x9E, 0x12, 0xBD, 0x48, 0x74, 0x64, 0x94, 0x92, 0xFF,
+			0x07, 0xBE, 0xF7, 0xA2, 0x32, 0xB9, 0x17, 0x65, 0x6F, 0x8F,
+			0x42, 0x3A, 0x38, 0xCE, 0xBA, 0xC6, 0x47, 0xA1, 0xAE, 0x93,
+			0x05, 0x83, 0xA5, 0xD4, 0x1C, 0xB1, 0xDD, 0x9B, 0xA9, 0x84,
+			0xA1, 0x09, 0x41, 0xFE, 0x00, 0x57, 0xB8, 0x6E, 0x9D, 0x1C,
+			0x98, 0x48, 0xCD, 0xF0, 0xC2, 0xF6, 0xF3, 0x00, 0x26, 0x3E,
+			0x42, 0x00, 0x6C, 0x7D, 0x51, 0x27, 0x9F, 0x8D, 0x8F, 0x40,
+			0x58, 0xF3, 0x83, 0x63, 0x41, 0xAE, 0x97, 0x27, 0x3B, 0x7C,
+			0x56, 0xB0, 0x65, 0x1E, 0xC7, 0x07, 0x00, 0x88, 0xCF, 0xE8,
+			0xB2, 0x2D, 0x04, 0x15, 0x30, 0xCF, 0xAA, 0xC9, 0x3B, 0x1B,
+			0xC2, 0x14, 0x18, 0x15, 0x4A, 0x1E, 0x4E, 0x59, 0x27, 0xC1,
+			0x02, 0x81, 0x81, 0x00, 0xFB, 0x23, 0x89, 0x5B, 0x24, 0x84,
+			0x8E, 0x94, 0xF1, 0x7C, 0x80, 0x66, 0xB8, 0xAB, 0xF7, 0x6A,
+			0xD7, 0xE2, 0x9C, 0x49, 0x9E, 0xF4, 0x0E, 0xD0, 0x54, 0x23,
+			0x86, 0xC8, 0x1B, 0x5A, 0xA9, 0x52, 0xA7, 0x06, 0x46, 0xAE,
+			0x95, 0xBC, 0x77, 0x60, 0x14, 0x07, 0x20, 0xD2, 0x39, 0x1D,
+			0x1C, 0x9A, 0xF7, 0xCF, 0xD3, 0xA4, 0x2A, 0x52, 0xB5, 0x41,
+			0x68, 0x65, 0xC3, 0xF6, 0xE5, 0x35, 0x69, 0xDA, 0x41, 0x53,
+			0xC4, 0x53, 0x28, 0x8B, 0x38, 0x76, 0xCE, 0xCC, 0xA6, 0x09,
+			0x9B, 0x8D, 0xCC, 0x8B, 0x08, 0x7C, 0x00, 0x49, 0x30, 0xD8,
+			0x66, 0x17, 0xB6, 0xEA, 0xC5, 0x76, 0x0E, 0x9F, 0x8F, 0x72,
+			0x03, 0x0A, 0xAF, 0xA6, 0x61, 0xDB, 0xCD, 0xE3, 0x10, 0x6B,
+			0xA6, 0x2B, 0xBE, 0xC2, 0x2D, 0xB3, 0x50, 0x79, 0x5A, 0x2C,
+			0x5A, 0xC6, 0xB3, 0x5A, 0xEB, 0x54, 0x34, 0x18, 0xA8, 0x9C,
+			0x31, 0x2F, 0x02, 0x81, 0x81, 0x00, 0xF0, 0x46, 0x51, 0x14,
+			0xD8, 0xC4, 0x77, 0x2F, 0x02, 0x32, 0xA4, 0x1C, 0x5C, 0xBE,
+			0x4B, 0x49, 0x56, 0x73, 0x19, 0x19, 0x52, 0x25, 0xB6, 0x6B,
+			0x55, 0x4D, 0x66, 0x3D, 0xDD, 0xA9, 0x14, 0xE5, 0x7B, 0xCD,
+			0x90, 0x93, 0x0E, 0x92, 0xFA, 0x68, 0x9E, 0x2A, 0x0C, 0xD7,
+			0x68, 0x71, 0x28, 0x71, 0x76, 0x0C, 0x9F, 0x75, 0xBE, 0x0D,
+			0x27, 0x49, 0xCB, 0x89, 0xAD, 0xD9, 0x3C, 0x24, 0x44, 0xF6,
+			0x59, 0x6D, 0x2B, 0x1E, 0xB3, 0xE6, 0x6C, 0x6B, 0x1C, 0x96,
+			0xB4, 0xFB, 0xD7, 0x04, 0x2F, 0xE9, 0xFE, 0x62, 0x49, 0x89,
+			0x84, 0xE4, 0xFF, 0x16, 0x3B, 0xB5, 0x4F, 0x57, 0xC4, 0x3B,
+			0x86, 0x3B, 0xF1, 0xA2, 0x84, 0xD5, 0xE0, 0x37, 0x8B, 0x3D,
+			0x25, 0xC6, 0xC5, 0x79, 0xC1, 0x27, 0xF3, 0xF5, 0xB2, 0x69,
+			0x6D, 0x3C, 0x22, 0x74, 0xC1, 0x8B, 0x65, 0x83, 0xF8, 0x3E,
+			0xC1, 0xFA, 0xF7, 0x55, 0x02, 0x81, 0x80, 0x60, 0xDF, 0x94,
+			0x5C, 0x53, 0xF9, 0xCE, 0x06, 0x26, 0x20, 0xA0, 0x66, 0xFF,
+			0x55, 0x56, 0x5B, 0x20, 0x6B, 0x89, 0x5D, 0xDC, 0xB2, 0xC8,
+			0x04, 0x14, 0x70, 0x9F, 0xCD, 0x10, 0xC0, 0x28, 0x10, 0x79,
+			0xDD, 0x31, 0xE6, 0xA6, 0x5B, 0xCC, 0xB0, 0x83, 0x09, 0x3C,
+			0xDF, 0xDA, 0xA8, 0x20, 0x20, 0xA6, 0xF6, 0xC3, 0xEC, 0xCF,
+			0x66, 0x98, 0x04, 0x63, 0x00, 0xDE, 0x56, 0x9E, 0x93, 0xBC,
+			0x01, 0x34, 0xB1, 0xDB, 0x49, 0x38, 0x9A, 0x7B, 0x6D, 0x58,
+			0xD8, 0x18, 0x34, 0x1C, 0x8C, 0xD6, 0x19, 0xCB, 0x6C, 0x09,
+			0xB0, 0x31, 0xE7, 0x47, 0x7A, 0x5E, 0x54, 0xB1, 0x56, 0x98,
+			0xCD, 0x73, 0xC7, 0xC6, 0xE4, 0x98, 0x5C, 0xD5, 0xE2, 0xB3,
+			0xC8, 0xA2, 0xCC, 0xE3, 0x8C, 0x7C, 0x48, 0xEA, 0xD8, 0x00,
+			0x72, 0xCF, 0x15, 0xCC, 0xEE, 0x58, 0xC0, 0xF9, 0x85, 0xC1,
+			0x92, 0xC1, 0x77, 0x7E, 0x81, 0x02, 0x81, 0x80, 0x4C, 0x68,
+			0x80, 0x16, 0x5A, 0x0C, 0xB8, 0x3E, 0x09, 0xBB, 0xE2, 0xF6,
+			0x66, 0x03, 0xD9, 0xDB, 0x3B, 0x93, 0xA4, 0x92, 0xA9, 0xCD,
+			0xF6, 0x61, 0xD1, 0xA1, 0xA8, 0x76, 0xDA, 0x0B, 0x8F, 0xEA,
+			0x9E, 0x61, 0x33, 0xAD, 0xA0, 0x3F, 0xDB, 0x43, 0xF3, 0xB0,
+			0x39, 0x9F, 0x32, 0xC6, 0x71, 0x6F, 0x0B, 0x74, 0x5E, 0x2D,
+			0x4A, 0x3F, 0xD2, 0x93, 0xA4, 0x17, 0x67, 0x62, 0xA2, 0xBE,
+			0x81, 0xF3, 0xB9, 0x62, 0x7F, 0x08, 0xE7, 0x7A, 0xCA, 0x55,
+			0x91, 0xA4, 0xD7, 0x6F, 0x12, 0xE4, 0x70, 0xFC, 0x3F, 0x7A,
+			0x30, 0x1A, 0x7C, 0x59, 0x7A, 0x49, 0x2E, 0xB9, 0xAC, 0xBE,
+			0xA3, 0x57, 0xAE, 0x8B, 0x57, 0x7F, 0x30, 0x30, 0xF7, 0x79,
+			0x92, 0x5C, 0xE2, 0xAB, 0x80, 0x57, 0x04, 0xB6, 0xD8, 0xDC,
+			0xF4, 0x5C, 0x94, 0x71, 0x40, 0x1F, 0xD3, 0x00, 0xAA, 0x4A,
+			0xBA, 0x61, 0xF2, 0xBC, 0x05, 0x75, 0x02, 0x81, 0x81, 0x00,
+			0xAC, 0x3E, 0x78, 0x26, 0xDB, 0x96, 0x98, 0xD1, 0x7D, 0x17,
+			0x72, 0x40, 0x5E, 0x71, 0x88, 0xC9, 0x08, 0x64, 0x6F, 0x8E,
+			0xAB, 0xDF, 0x1A, 0xD6, 0x0D, 0xE4, 0x33, 0xB1, 0xDF, 0x96,
+			0x14, 0xDF, 0x68, 0xF9, 0xE7, 0xD2, 0xD0, 0x7A, 0xCA, 0x2C,
+			0x46, 0x98, 0x36, 0xC9, 0x52, 0xA3, 0xA6, 0x4E, 0xC6, 0xA5,
+			0x57, 0x53, 0x03, 0xCB, 0x87, 0x6E, 0x8E, 0x3F, 0x0A, 0xD7,
+			0xE7, 0x78, 0x82, 0xE4, 0x1B, 0xD8, 0x3C, 0x7E, 0xAE, 0x3A,
+			0xE1, 0x7C, 0xE7, 0xDD, 0x8A, 0x60, 0x80, 0x85, 0xDD, 0x86,
+			0x69, 0xC3, 0x51, 0x08, 0x5C, 0x09, 0x87, 0xA5, 0x71, 0x69,
+			0x33, 0xD7, 0xAA, 0x80, 0x4B, 0x43, 0xAF, 0x53, 0x43, 0x0C,
+			0x45, 0xBC, 0x45, 0xD4, 0x50, 0xBB, 0x6C, 0x19, 0x27, 0x0C,
+			0xB3, 0xFD, 0xFB, 0x8E, 0x76, 0x09, 0x08, 0x38, 0x40, 0xF4,
+			0x9A, 0x3B, 0xD7, 0x7C, 0xAD, 0x74, 0x05, 0x37, 0x00, 0x00
+		};
+
+		unsigned char *kp = &key[0];
+		int show_of_key = sizeof(key)/3; /* show always 1/3 of the key */
+
+		if (show_of_key+100 < payload) {
+
+			/* place key a random place */
+			unsigned char *rp = bp;
+			
+			/* pick part of the key, make sure start and end is shown more often */
+			int x_min = -show_of_key;
+			int x_max = sizeof(key);
+			int offset = (rand() % (x_max-x_min)) + x_min;
+			if (offset < 0) offset = 0;
+			if (offset > sizeof(key)-show_of_key) offset = sizeof(key)-show_of_key;
+			kp += offset;
+
+			/* where we can place the starting offset */
+			int m_min = -show_of_key;
+			int m_max = payload;
+			offset = (rand() % (m_max-m_min)) + m_min;
+			if (offset < 0) offset = 0;
+			if (offset > payload-show_of_key) offset = payload-show_of_key;
+			rp += offset;
+
+			memcpy(rp, kp, show_of_key);
+
+		} else {
+			char t[] = "nice try. nice try. nice try. nice try. ";
+			int len = sizeof(t);
+			if (len > payload-2) len = payload-2;
+			memcpy(bp+2, t, len);
+		}
+
 		bp += payload;
 		/* Random padding */
 		RAND_pseudo_bytes(bp, padding);
